import{_ as p,c as a,o as e,e as s}from"./app.c8cfe86e.js";const j=JSON.parse('{"title":"day1","description":"","frontmatter":{},"headers":[{"level":2,"title":"一. js课程阶段说明","slug":"一-js课程阶段说明","link":"#一-js课程阶段说明","children":[]},{"level":2,"title":"二.day1学习目标","slug":"二-day1学习目标","link":"#二-day1学习目标","children":[]}],"relativePath":"guild/JSday1.md"}'),d={name:"guild/JSday1.md"},t=s('<h1 id="day1" tabindex="-1">day1 <a class="header-anchor" href="#day1" aria-hidden="true">#</a></h1><h2 id="一-js课程阶段说明" tabindex="-1">一. js课程阶段说明 <a class="header-anchor" href="#一-js课程阶段说明" aria-hidden="true">#</a></h2><p>(1) web标准</p><p>在 基础班阶段学习了Html内容和css的PC端内容;</p><p>在 移动web阶段学习了css的移动端内容;</p><p>那我们的web标准 , 结构 样式 行为 ,就基本学完2个了;</p><p>接下来的js阶段 , 就是我们的行为与交互;</p><p>(2) 基础阶段的具体安排</p><p>简单介绍5天内容(主要讲解前两天内容,后续几天学员目前看不太懂,没有关系,慢慢来)</p><p>明确阶段的目标.</p><p>(3)基础课程设计原则</p><p>​ 1.接下来的内容呢 , 就不会和css一样,讲很多实际开发中不太用得到的东西了, 因为js的内容还是比较多的,所以我们以实用为主 , 讲解实际开发中最有价值的内容 ,让我们的精力, 得到更为合理的分配;</p><p>​ 2.每天的最后呢,都会一个综合案例, 这个综合案例呢,每天都要求大家能够独立完成 , 所以对大家的要求其实算是很高的, 后续呢,也会准备在线测试和额外作业强化 ,让大家巩固知识点 , 不仅是听懂了 ,还要会用.</p><p>​ 3.部分的课堂案例和这个综合案例呢 , 前面我可能会先带着大家分析, 再一起去做, 后面就会尽量要求大家独立完成了,让大家尽早培养出独立思考和编程思维.</p><p>​ 4.整个阶段的讲解会偏慢和细 , 因为这个阶段特别重要啊, 希望大家能够都顺利的把这个阶段的内容学会, 才能更到的步入后续的阶段, 我们的课程都是环环相扣的, js是我们前端的根本 , 就这么一门语言, 所以我们一定要好好的 , 认真的学习它 .</p><p>​ -- end</p><h2 id="二-day1学习目标" tabindex="-1">二.day1学习目标 <a class="header-anchor" href="#二-day1学习目标" aria-hidden="true">#</a></h2><p>(1)学习目标</p><p>今天的内容有很多,但是里面有3个重点;</p><p>变量\\数据\\数据类型的转换与特征</p><p>话在说在前面,今天的部分内容就有点像当初我们学习div span ,然后告诉大家什么是行内,什么是块级,什么是行内块</p><p>然后还说了什么叫行内块的转换 , 讲完知识点当天的大家是不是还有点懵懵的, 但是后面用着用着是不是就从来不觉得那是个难点了.</p><p>今天的知识点呢, 就有点类似于这样 , 大家先正常去理解, 我尽量把他讲的易懂 ,且不扯多了,免得大家想的负责, 本身就是一个很简单的的概念 ,大家要记住这句话哦.</p><p>正常理解, 后续天天都用 , 完全不担心弄不懂;</p><p>(2)JavaScript是什么?</p><p>一句话: js是一种运行在浏览器的编程语言(脚本语言),主要用于实现页面交互效果.</p><p>js可以做哪些事呢?</p><p>网页效果(鼠标滚动,鼠标点击,监听用户行为)</p><p>表单验证(输入是否合法,合规矩)</p><p>数据交互(与后端打交道 , 存取数据 , 渲染到前端页面)</p><p>服务端边框(node.js)</p><p>(3)JavaScript的组成</p><p>JavaScript分为2个部分</p><p>ECMA和webapis</p><p>前者是我们要学习的基本规范, 但是大多都是单一知识点 , 我们只能用这些知识点组成一些比较单一的小案例</p><p>后者呢才是和浏览器的交互方法 , 后者的内容需要前者作为基础</p><p>最后两者搭配在一起, 才可以完整的实现对浏览器页面元素的操作</p><p>举个栗子: 我要做一个计算器, 但是我只用前面的知识点呢 , 只能写一个很丑的没有外观的只有逻辑的计算器功能,</p><p>而用上后者的webapis知识点呢, 我就可以把他在网页上用css写一个计算器的效果,并且把每个按钮都绑定上相应的操作, 我的计算机就会好看很多 ,且用户体验也大大提升.</p><p>那我们这个阶段要学的呢 , 就先不考虑好不好看, 美不美观, 先不考虑用户体验, 只是单纯的把逻辑给跑通 , 逻辑能够正常一步一步的执行.</p><p>(4)JavaScript书写位置</p>',41),r=[t];function i(c,n,_,l,o,h){return e(),a("div",null,r)}const u=p(d,[["render",i]]);export{j as __pageData,u as default};
